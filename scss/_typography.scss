// @use 'sass:math';
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';

@use '../lib/breakbeat' as *;
@use 'config' as cc;
@use 'grid';
@use 'util';


/// Fancy font size
/// 
/// Usage for linear scaling:
/// font-size: _fancy_font_size((
///   sm: 24px,
///   xl: 72px,
/// ));
/// 
/// For non-linear scaling, use parabolic_font_sizes()
/// 
/// @param {map} param
/// @return {number | calculation} Fixed size or clamp()
@function _fancy_font_size($set) {
	$min: util.map_first_value($set);
	@if list.length(map.values($set)) == 1 {
		@return $min;
	}
	
	$max: list.nth(map.values($set), 2);
	$start: map.get($breakpoints, util.map_first_key($set));
	$end: map.get($breakpoints, util.map_last_key($set));
	
	$unit_breakpoint: math.unit($start);
	$unit_value: math.unit($min);
	
	@if $unit_breakpoint != $unit_value {
		$start: util.convert_units($start, $from: $unit_breakpoint, $to: $unit_value);
		$end: util.convert_units($end, $from: $unit_breakpoint, $to: $unit_value);
	}
	
	$size_fixed: calc(($max - $min) / ($end - $start));
	@if $size_fixed == 0 {
		@return $min;
	}
	
	$size_fluid: ($size_fixed * 100vw);
	$size_preferred: calc(util.trunx($size_fluid) + util.trunx($min - ($size_fixed * $start)));
	
	@if $min > $max {
		$min_swap: $min;
		$min: $max;
		$max: $min_swap;
	}
	
	@return clamp($min, $size_preferred, $max);
}


/// Convert two-item list to map, using default font scaling breakpoints
/// 
/// Example output: (
///   sm: 24px,
///   lg: 32px,
/// )
/// 
/// @param {list} $sizes
/// @return {map} *
@function _convert_font_size_list_to_map($sizes) {
	@return (
		cc.get(font_scale_breakpoint_min): list.nth($sizes, 1),
		cc.get(font_scale_breakpoint_max): list.nth($sizes, 2),
	);
}


/// Find closest font size to target
/// @param {map} $set
/// @param {number} $target_size
/// @return {map} *
@function closest_font_size($set, $target_size) {
	
	$all_largest_sizes: ();
	$all_differences: ();
	
	@each $selector, $sizes in $set {
		@if meta.type_of($sizes) == number {
			$all_largest_sizes: map.set($all_largest_sizes, $selector, $sizes);
			$all_differences: map.set($all_differences, $selector, math.abs($sizes - $target_size));
		}
		
		@else if meta.type_of($sizes) == list {
			$all_largest_sizes: map.set($all_largest_sizes, $selector, list.nth($sizes, 1));
			$all_differences: map.set($all_differences, $selector, math.abs(list.nth($sizes, 1) - $target_size));
		}
		
		@else {
			$last_size: util.map_last_value($sizes);
			@if meta.type_of($last_size) == list {
				$last_size: list.nth($last_size, 1);
			}
			
			$all_largest_sizes: map.set($all_largest_sizes, $selector, $last_size);
			$all_differences: map.set($all_differences, $selector, math.abs($last_size - $target_size));
		}
	}
	
	@debug '$all_largest_sizes (#{meta.type_of($all_largest_sizes)}):';
	@debug $all_largest_sizes;
	
	@debug '$all_differences (#{meta.type_of($all_differences)}):';
	@debug $all_differences;
	
	$lowest: 0;
	@each $selector, $difference in $all_differences {
		
	}
	
	@return '';
}


@function _convert_property_name_to_css($property_name) {
	@return map.get((
		leading: line-height,
		tracking: letter-spacing,
	), $property_name);
}


/// Create parabolic responsive font sizes
/// 
/// Note that this may include an unnecessary media query for the last entry
/// if it has a fixed value, but we need it there in case the second-to-last
/// value is also fixed, and therefore doesn't yield a clamp() value that
/// would obviate the need for another media query. We may also need it if
/// using the between operator, as that would also cause the value to revert
/// to the smallest breakpoint value after the last clamp().
/// 
/// Example input: (
///   h1: 56px,
///   h2: 36px 48px,
///   h3: (
///     sm: 24px,
///     lg: 32px fixed,
///     xl: 36px,
///     signature: FONT_SANS_BOLD_UPPER,
///   ),
///   h4: (
///     size: 24px 32px,
///     signature: FONT_SANS_LIGHT,
///   ),
/// )
/// 
/// @param {map} $font_sizes
@mixin parabolic_font_sizes($font_sizes, $property: 'font-size') {
	@each $selector, $sizes in $font_sizes {
		
		// Size is formatted as a single value
		// Example: (h1: 24px,)
		@if meta.type_of($sizes) == number {
			#{$selector} {
				#{$property}: $sizes;
			}
		}
		
		// Sizes are formatted in a list, using default settings for font scaling
		// breakpoints ($font_scale_breakpoint_min, $font_scale_breakpoint_max),
		// or as a map with explicity defined breakpoints
		// 
		// Examples: (
		//   h1: 24px 36px,
		//   h2: (
		//     sm: 24px,
		//     md: 32px [fixed],
		//     lg: 42px [snap 24px],
		//     xl: 36px,
		//     signature: FONT_SANS_BOLD_UPPER,
		//   ),
		//   h4: (
		//     size: 24px 32px,
		//     signature: FONT_SANS_LIGHT,
		//   ),
		// ),
		@else {
			@if meta.type_of($sizes) == list {
				$sizes: _convert_font_size_list_to_map($sizes);
			}
			
			$signature: DEFAULT;
			@if map.has_key($sizes, signature) {
				$signature: map.get($sizes, signature);
				$sizes: map.remove($sizes, signature);
			}
			
			$is_integer: util.is_zero(util.map_first_value($sizes) % 1);
			$sizes: util.create_intermediate_sizes($sizes, $is_integer);
			$size_count: list.length(map.keys($sizes));
			
			// Create map of multiples of each value in relation to first value
			$factors: _factor_map($sizes);
			
			$font_properties: map.get(cc.get(all_font_properties), $signature);
			@if $font_properties == null {
				$font_properties: ();
				@warn 'Undefined font signature: #{$signature}';
			}
			
			// TODO: this probably won't work with keywords
			$first_font_size: util.map_first_value($sizes);
			$last_font_size: util.map_last_value($sizes);
			
			// Make all property units match font units
			@each $propery_name, $property_values in $font_properties {
				@if math.is_unitless(list.nth($property_values, 1)) {
					$px_props: (
						list.nth($property_values, 1) * $first_font_size,
						list.nth($property_values, 2) * $last_font_size,
					);
					$font_properties: map.set($font_properties, $propery_name, $px_props);
				}
				
				@else {
					$unit_prop: math.unit(list.nth($property_values, 1));
					$unit_font: math.unit($first_font_size);
					@if $unit_prop != $unit_font {
						$font_unit_props: ();
						@each $item in $property_values {
							$converted: util.convert_units($item, $from: $unit_prop, $to: $unit_font);
							$font_unit_props: list.append($font_unit_props, $converted);
						}
						$font_properties: map.set($font_properties, $propery_name, $font_unit_props);
					}
				}
			}
			
			// Use factors to create intermediate values for font properties
			$nice_properties: ();
			
			// Min is always 1, because it's the first value divided by itself
			$min_factor: util.map_first_value($factors);
			$max_factor: util.map_last_value($factors);
			
			@each $propery_name, $property_values in $font_properties {
				$min_prop: list.nth($property_values, 1);
				$max_prop: list.nth($property_values, 2);
				@each $factor_key, $factor_value in $factors {
					$interpolated_value: null;
					
					@if meta.type_of($factor_value) == list {
						$keyword: list.nth($factor_value, 2);
						@if $keyword == fixed {
							$factor_value: list.nth($factor_value, 1);
							$a: _factor_into_value($factor_value, $min_factor, $max_factor, $min_prop, $max_prop);
							$interpolated_value: $a fixed;
						} @else if $keyword == snap {
							$val_a: list.nth($factor_value, 1);
							$val_b: list.nth($factor_value, 3);
							$a: _factor_into_value($val_a, $min_factor, $max_factor, $min_prop, $max_prop);
							$b: _factor_into_value($val_b, $min_factor, $max_factor, $min_prop, $max_prop);
							$interpolated_value: $a snap $b;
						}
					} @else {
						$interpolated_value: _factor_into_value($factor_value, $min_factor, $max_factor, $min_prop, $max_prop);
					}
					
					$css_prop: _convert_property_name_to_css($propery_name);
					$nice_properties: map.set($nice_properties, $css_prop, $factor_key, $interpolated_value);
				}
			}
			
			$size_index: 1;
			@each $breakpoint, $size in $sizes {
				@if
					meta.type_of($size) == list
					and list.nth($size, 2) == fixed
				{
					@include b($breakpoint) {
						#{$selector} {
							#{$property}: list.nth($size, 1);
							@each $k, $v in $nice_properties {
								#{$k}: map.get($v, $breakpoint);
							}
						}
					}
				}
				
				// Output a basic font size for a single defined breakpoint
				@else if $size_count == 1 {
					@include b($breakpoint) {
						#{$selector} {
							#{$property}: $size;
							@each $k, $v in $nice_properties {
								#{$k}: map.get($v, $breakpoint);
							}
						}
					}
				}
				
				// For multiple input sizes, we skip the last entry, because either:
				// - its value is already accounted for in the clamp() that starts
				//   with the second-to-last entry and defines a maximum size that is
				//   equal to the size on the largest breakpoint
				// - or the size of the last entry is fixed, in which case the it has
				//   already been included by the simple check for fixed values above
				@else if $size_index < $size_count {
					$next_breakpoint: list.nth(map.keys($sizes), $size_index + 1);
					$next_size: list.nth(map.values($sizes), $size_index + 1);
					
					$next_props: ();
					@each $kk, $vv in $nice_properties {
						$next_prop: list.nth(map.values($vv), $size_index + 1);
						$next_props: map.set($next_props, $kk, $next_prop);
					}
					
					// If size includes any keywords, isolate first size value
					@if meta.type_of($next_size) == list {
						$next_size: list.nth($next_size, 1);
					}
					
					// If size includes snap keyword, use second size as minimum
					@if (
						meta.type_of($size) == list
						and list.nth($size, 2) == snap
					) {
						$size: list.nth($size, 3);
					}
					
					$fancy_as_fuck_font_size: _fancy_font_size((
						$breakpoint: $size,
						$next_breakpoint: $next_size,
					));
					
					$fancy_properties: ();
					@each $p, $pv in $nice_properties {
						$this_property: map.get($nice_properties, $p, $breakpoint);
						$next_property: map.get($next_props, $p);
						
						@if (
							meta.type_of($this_property) == list
							and list.nth($this_property, 2) == snap
						) {
							$this_property: list.nth($this_property, 3);
						}
						
						// If property includes any keywords, isolate first property value
						@if meta.type_of($next_property) == list {
							$next_property: list.nth($next_property, 1);
						}
	
						$fancy_property: _fancy_font_size((
							$breakpoint: $this_property,
							$next_breakpoint: $next_property,
						));
						$fancy_properties: map.set($fancy_properties, $p, $fancy_property);
					}
					
					// Use between operator to isolate font sizes to each breakpoint
					// range, rather than overriding them at every breakpoint
					$use_between_operator: true;
					
					// Use regular >= operator for second-to-last breakpoint, because
					// there is no media query after it that sets a fixed size
					$is_second_to_last_breakpoint: $size_index == $size_count - 1;
					
					// For the first size, since we're using clamp to set the minimum
					// size, which may occur at a breakpoint that's not zero, we should
					// not included a media query
					@if $size_index == 1 {
						#{$selector} {
							#{$property}: $fancy_as_fuck_font_size;
							@each $fancy_key, $fancy_value in $fancy_properties {
								#{$fancy_key}: $fancy_value;
							}
						}
					} @else {
						@if
							$use_between_operator
							and not $is_second_to_last_breakpoint
						{
							$next_smallest_breakpoint: grid.find_next_smallest_breakpoint(
								map.keys($sizes), $breakpoint
							);
							@include b('>< #{$breakpoint} #{$next_smallest_breakpoint}') {
								#{$selector} {
									#{$property}: $fancy_as_fuck_font_size;
									@each $fancy_key, $fancy_value in $fancy_properties {
										#{$fancy_key}: $fancy_value;
									}
		
								}
							}
						} @else {
							@include b($breakpoint) {
								#{$selector} {
									#{$property}: $fancy_as_fuck_font_size;
									@each $fancy_key, $fancy_value in $fancy_properties {
										#{$fancy_key}: $fancy_value;
									}
		
								}
							}
						}
					}
				}
				
				$size_index: $size_index + 1;
			}
		}
	}
}


@function _factor_map($sizes) {
	$factors: ();
	$first_size: util.map_first_value($sizes);
	
	@each $key, $size in $sizes {
		@if meta.type_of($size) == list {
			$keyword: list.nth($size, 2);
			@if $keyword == fixed {
				$size: list.nth($size, 1);
				$factors: map.set($factors, $key, calc($size / $first_size) fixed);
			} @else if $keyword == snap {
				$prev_size: list.nth($size, 1);
				$size: list.nth($size, 3);
				$factors: map.set($factors, $key, calc($prev_size / $first_size) snap calc($size / $first_size));
			}
		} @else {
			$factors: map.set($factors, $key, calc($size / $first_size));
		}
	}
	
	@return $factors;
}


@function _factor_into_value($factor_value, $min_factor, $max_factor, $min_prop, $max_prop) {
	@if ($max_factor - $min_factor) == 0 {
		@return $min_prop;
	}
	$how_far_along: (1 - calc(
		($max_factor - $factor_value) / ($max_factor - $min_factor)
	));
	@return (($max_prop - $min_prop) * $how_far_along) + $min_prop;
}
