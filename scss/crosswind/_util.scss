@use 'sass:string';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:list';

@use '../config';
@use './../lib/breakbeat';


/// Convert string to number
/// @link https://kittygiraudel.com/2014/01/15/sass_string_to_number/
/// @author Kitty Giraudel
/// @param {String | Number} $value - Value to be parsed
/// @return {Number} *
@function convert_to_number($value) {
  @if meta.type_of($value) == number {
    @return $value;
  } @else if meta.type_of($value) != string {
    @error 'Value for convert_to_number() should be a number or a string';
  }
  
  $result: 0;
  $digits: 0;
  $is_negative: string.slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($is_negative, 2, 1) through string.length($value) {
    $character: string.slice($value, $i, $i);
    
    @if not (
      $character == '.'
      or list.index(map.keys($numbers), $character)
    ) {
      @return append_unit_to_value(if($is_negative, ($result * -1), $result), string.slice($value, $i));
    }
    
    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: (($result * 10) + map.get($numbers, $character));
    } @else {
      $digits: ($digits * 10);
      $result: ($result + calc(map.get($numbers, $character) / $digits));
    }
  }
  
  @return if($is_negative, ($result * -1), $result);
}


/// Append unit to numeric value
/// @link https://kittygiraudel.com/2014/01/15/sass_string_to_number/
/// @author Kitty Giraudel
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
/// @return {Number} - `$value` expressed in `$unit`
@function append_unit_to_value($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);
  @if not list.index(map.keys($units), $unit) {
    @error 'Invalid unit: #{$unit}';
  }
  
  @return ($value * map.get($units, $unit));
}


/// Is this value zero?
/// @param {mixed} $value
/// @return {bool} *
@function is_zero($value) {
  @return
    meta.type_of($value) == number
    and strip_units($value) == 0
  ;
}


/// Strip units from number by math
/// @param {number} $number
/// @return {unitless number} *
@function strip_units($number) {
	@if
		meta.type_of($number) == number
		and not math.is_unitless($number)
	{
		$one_of_unit: (($number * 0) + 1);
		@return calc($number / $one_of_unit);
	}
	@return $number;
}


/// Strip units from number by string manipulation
/// @param {number} $number
/// @return {unitless number} *
@function strip_units_by_string($number) {
  @if
    meta.type_of($number) == number
    and not math.is_unitless($number)
  {
    $num_length: string.length(#{$number});
    $unit_length: string.length(math.unit($number));
    $unitless: string.slice(#{$number}, 1, ($num_length - $unit_length));
    @return convert_to_number($unitless);
  }
  // @warn '"#{$number}" is not a number, or it does not have any units to strip away.';
  @return $number;
}


/// Quick sort
/// @author Sam Richards
/// @param {List} $list - list to sort
/// @return {List} *
@function quick_sort($list) {
  $less_than: ();
  $equal: ();
  $greater_than: ();
	
  @if list.length($list) > 1 {
    $seed: list.nth($list, math.ceil(calc(list.length($list) / 2)));
		
    @each $item in $list {
      @if ($item == $seed) {
        $equal: list.append($equal, $item);
      } @else if ($item < $seed) {
        $less_than: list.append($less_than, $item);
      } @else if ($item > $seed) {
        $greater_than: list.append($greater_than, $item);
      }
    }
		
    @return list.join(
			list.join(
				quick_sort($less_than),
				$equal
			),
			quick_sort($greater_than)
		);
  }
	
  @return $list;
}


/// Sort map by numeric values
/// @param {map} $input
/// @return {map} *
@function map_sort($input) {
	$values_sorted: quick_sort(map.values($input));
	$map_sorted: ();
	@each $value in $values_sorted {
		$index: list.index(map.values($input), $value);
		$key: list.nth(map.keys($input), $index);
		$map_sorted: map.set($map_sorted, $key, $value);
	}
	@return $map_sorted;
}


/// Inject one sorted map into another, maintaining sort order
/// @param {map} $source
/// @param {map} $insert
/// @return {map} *
@function map_insert($source, $insert) {
	$insert_sorted: map_sort($insert);
	
	// Insert values into source map
	@each $key, $value in $source {
		@each $insert_key, $insert_value in $insert_sorted {
			$stop: false;
			@if
				$value > $insert_value
				and not map.has_key($source, $insert_key)
				and not $stop
			{
				$before_map: map_subset($source, $before: $key);
				$from_map: map_subset($source, $from: $key);
				
				$source: map.merge(
					map.merge(
						$before_map,
						(#{$insert_key}: $insert_value),
					),
					$from_map
				);
				
				$stop: true;
			}
		}
	}
	
	// If last insertion value is larger than last source value, append it
	$last_value: list.nth(
		map.values($source),
		list.length(map.values($source))
	);
	$last_insert_value: list.nth(
		map.values($insert_sorted),
		list.length(map.values($insert_sorted))
	);
	@if $last_insert_value > $last_value {
		$last_insert_key: list.nth(
			map.keys($insert_sorted),
			list.length(map.keys($insert_sorted))
		);
		$source: map.set($source, $last_insert_key, $last_insert_value);
	}
	
	@return $source;
}


/// Get subset of map keys and values
/// @param {map} $map
/// @param {string} $before
/// @param {string} $to
/// @param {string} $from
/// @param {string} $after
/// @return {map} *
@function map_subset($map, $before: null, $to: null, $from: null, $after: null) {
	$output: ();
	
	@if $from != null and $to != null {
		@return map_subset(map_subset($map, $from: $from), $to: $to);
	}
	
	// Get all pairs before but not including $before key
	@if $before != null {
		$stop: false;
		@each $key, $value in $map {
			@if $key != $before and not $stop {
				$output: map.set($output, $key, $value);
			} @else if $key == $before {
				$stop: true;
			}
		}
	}
	
	// Get all pairs up to and including $to key
	@else if $to != null {
		$stop: false;
		@each $key, $value in $map {
			@if not $stop {
				$output: map.set($output, $key, $value);
			}
			@if $key == $to {
				$stop: true;
			}
		}
	}
	
	// Get all pairs starting with $from key
	@else if $from != null {
		$start: false;
		@each $key, $value in $map {
			@if $key == $from {
				$start: true;
			}
			@if $start {
				$output: map.set($output, $key, $value);
			}
		}
	}
	
	// Get all pairs after $after key
	@else if $after != null {
		$start: false;
		@each $key, $value in $map {
			@if $start {
				$output: map.set($output, $key, $value);
			}
			@if $key == $after {
				$start: true;
			}
		}
	}
	
	@return $output;
}


/// Invert and reverse list of arguments for clamp()
/// @param {list} $list
/// @return {list} *
@function invert_clamp_list($list) {
	$result: reverse_list($list);
	@return invert_list($result);
}


/// Invert all values in list
/// @param {list} $list
/// @return {list} *
@function invert_list($list) {
	$separator: list.separator($list);
	$result: ();
	@each $value in $list {
		$result: list.append($result, ($value * -1), $separator);
	}
	@return $result;
}


/// Reverse list
/// @link https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions/
/// @param {list} $list
/// @param {boolean} $recursive
/// @return {list} *
@function reverse_list($list, $recursive: false) {
	$separator: list.separator($list);
	$result: ();
	
	@for $i from (list.length($list) * -1) through -1 {
		@if
			$recursive
			and meta.type_of(list.nth($list, math.abs($i))) == list
		{
			$result: list.append(
				$result,
				reverse_list(list.nth($list, math.abs($i)), $recursive),
				$separator
			);
		} @else {
			$result: list.append($result, list.nth($list, math.abs($i)), $separator);
		}
	}
	
	@return $result;
}


/// Convert three-element list to clamp(), or return first element
/// @param {list} $list
/// @return {calculation} *
@function list_to_clamp($list) {
	@if meta.type_of($list) != list {
		@return $list;
	}
	
	@if list.length($list) != 3 {
		@error 'List passed to list_to_clamp() was not three elements: ' + $list;
		@return list.nth($list, 1);
	}
	
	@return clamp(
		list.nth($list, 1),
		list.nth($list, 2),
		list.nth($list, 3)
	);
}


/// Show inline warning
/// @param {string} $message
@mixin warning($message) {
	@extend %cw-inline-warning;
	&::before {
		content: $message;
	}
}


/// @param {list} $a
/// @param {list} $b
/// @return {list} *
@function add_lists($a, $b) {
	@return combine_lists($a, $b, '+');
}


/// Subtract elements from two lists
/// @param {list} $a
/// @param {list} $b
/// @return {list} *
@function subtract_lists($a, $b) {
	@return combine_lists($a, $b, '-');
}


/// Perform calculation on two lists
/// @param {list} $a
/// @param {list} $b
/// @param {string} $operator
/// @return {list} *
@function combine_lists($a, $b, $operator) {
	@if
		meta.type_of($a) != list
		and meta.type_of($b) != list
	{
		@return operate($a, $b, $operator);
	}
	
	@if list.length($a) != list.length($b) {
		@error 'Lists passed to combine_lists() must be of same length';
	}
	
	$separator: list.separator($a);
	$result: ();
	$index: 1;
	@each $a_item in $a {
		$b_item: list.nth($b, $index);
		$item_result: operate($a_item, $b_item, $operator);
		$result: list.append($result, $item_result, $separator);
		$index: $index + 1;
	}
	@return $result;
}


/// Perform calculation on two values
/// @param {number} $a
/// @param {number} $b
/// @param {string} $operator
/// @return {number} *
@function operate($a, $b, $operator) {
	$result: 0;
	@if $operator == '+' {
		$result: ($a + $b);
	} @else if $operator == '-' {
		$result: ($a - $b);
	} @else if $operator == '*' {
		$result: ($a * $b);
	} @else if $operator == '/' {
		$result: calc($a / $b);
	}
	@return $result;
}


/// Peform calculation on each element in list
/// @param {list | number} $input
/// @param {number} $multiply
/// @param {number} $add
/// @return {list | number} *
@function operate_list($input, $multiply: 1, $add: 0) {
	@if meta.type_of($input) != list {
		$list_item_result: $input;
		@return operate_value($input, $multiply, $add);
	}
	
	$separator: list.separator($input);
	$result: ();
	@each $value in $input {
		$unit: math.unit($value);
		$list_item_result: operate_value($value, $multiply, $add);
		$result: list.append(
			$result,
			$list_item_result,
			$separator
		);
	}
	@return $result;
}


/// Peform calculation on value
/// @param {number} $input
/// @param {number} $multiply
/// @param {number} $add
/// @return {number} *
@function operate_value($input, $multiply: 1, $add: 0) {
	$result: $input;
	@if $multiply != 1 {
		$result: ($result * $multiply);
	}
	@if not is_zero($add) {
		$result: calc($result + $add);
	}
	@return $result;
}


/// Round number to nearest multiple
/// @param {number} $value
/// @return {int} *
@function round_to($value, $multiple) {
	@return (math.round(calc($value / $multiple)) * $multiple);
}


/// Round number to nearest multiple of 2
/// @param {number} $value
/// @return {int} *
@function round_even($value) {
	@return round_to($value, 2);
}


/// Round number to nearest multiple of 4
/// @param {number} $value
/// @return {int} *
@function round_four($value) {
	@return round_to($value, 4);
}


/// Round number to nearest multiple of 16
/// @param {number} $value
/// @return {int} *
@function round_sixteen($value) {
	@return round_to($value, 16);
}


/// Is this value a percentage?
/// @param {number} $value
/// @return {boolean} *
@function is_percent($value) {
	@return math.unit($value) == '%';
}


/// Truncate decimal to specified number of places
/// @param {number | list} $value
/// @param {int} $places
/// @return {number} *
@function truncate($value, $places: 4) {
	@return $value;
	
	// TODO: verify that flooring does not cause elements to accidentally reflow
	// when using negative numbers
	
	@if meta.type_of($value) == list {
		$separator: list.separator($value);
		$result: ();
		@each $list_item in $value {
			$result: list.append($result, truncate($list_item), $separator);
		}
		@return $result;
	}
	
	@return calc(math.floor($value * math.pow(10, $places)) / math.pow(10, $places));
}


/// Truncate decimal to specified number of places
/// @param {number | list} $value
/// @param {int} $places
/// @return {number} *
@function trunx($value, $places: 4) {
	// TODO: verify that flooring does not cause elements to accidentally reflow
	// when using negative numbers
	
	@if meta.type_of($value) == list {
		$separator: list.separator($value);
		$result: ();
		@each $list_item in $value {
			$result: list.append($result, truncate($list_item), $separator);
		}
		@return $result;
	}
	
	@return calc(math.floor($value * math.pow(10, $places)) / math.pow(10, $places));
}


/// Replace in string
/// @param {string} $input
/// @param {string} $search
/// @param {string} $replace
/// @return {string} *
@function replace($input, $search, $replace: '') {
	$index: string.index($input, $search);
	@if not $index {
		@return $input;
	}
	
	@return string.slice($input, 1, $index - 1)
		+ $replace
		+ replace(
				string.slice($input, $index + string.length($search)),
				$search,
				$replace
			)
	;
}


/// Split list at first occurrence of delimiter
/// @param {list} $input
/// @param {string} $delimiter
/// @return {map} List parts as a, b
@function split_list($input, $delimiter) {
	@if
		type_of($input) != list
		or not list.index($input, $delimiter)
	{
		@return (
			a: $input,
			b: null,
		);
	}
	
	$list_a: ();
	$list_b: ();
	$is_before_split: true;
	
	@each $item in $input {
		@if $item == $delimiter {
			$is_before_split: false;
		} @else {
			@if $is_before_split {
				$list_a: list.append($list_a, $item, $separator: space);
			} @else {
				$list_b: list.append($list_b, $item, $separator: space);
			}
		}
	}
	
	// TODO: consider this method of splitting lists
	// $list: 3 4 r 1 o -2;
	// $string: meta.inspect($list);
	// $split_list: string.split($string, o);
	// @debug $split_list;
	// @debug meta.type_of($split_list);
	
	@return (
		a: $list_a,
		b: $list_b,
	);
}


/// Interpolate numbers on a curve
/// 
/// Control acceleration of intervals with $curve:
/// - 0: No curvature, evenly-spaced numbers
/// - 0.5: Some curvature, smaller intervals at start of range
/// - 1: Greater curvature, more drastic change in intervals
/// - -0.5: Opposite curvature, larger intervals at start of range
/// 
/// @param {int} $start: starting number
/// @param {int} $end: ending number
/// @param {int} $count: total number of numbers
/// @param {float} $curve: acceleration of intervals
/// @param {bool} $round: round values
/// @return {list} *
@function interpolate($start, $end, $count, $curve: 1, $round: false) {
	$step: calc(($end - $start) / ($count - 1));
	$is_negative_curve: $curve < 0;
	$inversion: if($is_negative_curve, -1, 1);
	@if $is_negative_curve {
		$curve: ($curve * -1);
		$start_swap: $start;
		$start: $end;
		$end: $start_swap;
	}
	
	$values: ();
	@for $i from 0 through ($count - 1) {
		$x: calc($i / ($count - 1));
		$y: calc(math.pow($curve, $x) / $curve);
		$value: ($start + ($i * $step * $y * $inversion));
		@if $round {
			$value: math.round($value);
		}
		$values: append($values, $value);
	}
	
	@if $is_negative_curve {
		$values: reverse_list($values);
	}
	
	@return $values;
}


/// Get constant
/// @param {string} $key
/// @return {mixed} *
@function const($key) {
	@if not map.has_key($constants, $key) {
		@error 'Unknown constant: #{$key}';
	}
	
	@return map.get($constants, $key);
}


/// Create interpolated sizes for intermediate breakpoints
/// 
/// Output is a map defining explicit sizes for every breakpoint between
/// start and end breakpoints. Used in conjunction with mixins for creating
/// parabolic responsive values, like parabolic_font_sizes().
/// 
/// Note: this process has the potential to create some redundant key/value
/// pairs. However, since map entries are assigned by specifying the key and
/// value, any redundant key simply overwrites the existing pair, so it makes
/// no difference in the end.
/// 
/// Input: (
///   sm: 24px,
///   xl: 36px,
/// )
/// Output: (
///   sm: 24px,
///   md: 28px, <- Creates interpolates sizes
///   lg: 32px, <- for intermediate breakpoints
///   xl: 36px,
/// )
/// 
/// Use the "fixed" keyword to hold a fixed font size until the next defined
/// breakpoint. (Alternatively, define consecutive breakpoints having the
/// same value.)
/// 
/// Input with "fixed": (
///   sm: 24px,
///   md: 28px fixed,
///   xl: 36px,
/// )
/// Output with "fixed": (
///   sm: 24px,
///   md: 28px fixed,
///   (No "lg" size generated)
///   xl: 36px,
/// )
/// 
/// @param {map} $sizes
/// @return {map} *
@function create_intermediate_sizes($sizes, $with_rounding: true) {
	@if list.length(map.keys($sizes)) == 1 {
		@return $sizes;
	}
	
	$complete_sizes: ();
	$breakpoint_names: map.keys(breakbeat.$breakpoints);
	
	$size_index: 1;
	@each $breakpoint, $size in $sizes {
		$has_keyword: meta.type_of($size) == list;
		
		// If this size has a keyword (such as "fixed"), do not interpolate between
		// this and the next in the set
		@if $has_keyword {
			$complete_sizes: map.set(
				$complete_sizes,
				$breakpoint,
				$size
			);
			
			$is_first_breakpoint: list.index($breakpoint_names, $breakpoint) == 1;
			@if
				$size_index == 1
				and not $is_first_breakpoint
			{
				@warn 'The first font size (#{$breakpoint}: #{$size}) is defined as fixed, so there will be no font size for breakpoints below #{$breakpoint}';
			}
		}
		
		@else {
			@if $size_index < list.length(map.keys($sizes)) {
				$this_index_in_all: list.index($breakpoint_names, $breakpoint);
				
				$next_breakpoint: list.nth(map.keys($sizes), $size_index + 1);
				$next_size: list.nth(map.values($sizes), $size_index + 1);
				$next_size_keyword: null;
				@if meta.type_of($next_size) == list {
					$next_size_keyword: list.nth($next_size, 2);
					$next_size: list.nth($next_size, 1);
				}
				$next_index_in_all: list.index($breakpoint_names, $next_breakpoint);
				
				$intermediate_size_count: ($next_index_in_all - $this_index_in_all) - 1;
				@if $intermediate_size_count > 0 {
					$intermediate_sizes: interpolate(
						$start: $size,
						$end: $next_size,
						$count: $intermediate_size_count + 2,
						$curve: config.$font_scale_curve,
						$round: $with_rounding
					);
					
					// Pair each intermediate size with a breakpoint
					$intermediate_index: 1;
					@each $intermediate_size in $intermediate_sizes {
						// If there is a keyword on the next size, and we're on the last
						// intermediate size, that means we're on the one with the keyword,
						// and we need to add the keyword back so that it's represented in
						// the complete list
						@if
							$next_size_keyword != null
							and $intermediate_index == list.length($intermediate_sizes)
						{
							$intermediate_size: ($intermediate_size $next_size_keyword);
						}
						
						$intermediate_breakpoint_index: ($this_index_in_all + $intermediate_index) - 1;
						$complete_sizes: map.set(
							$complete_sizes,
							list.nth($breakpoint_names, $intermediate_breakpoint_index),
							$intermediate_size
						);
						$intermediate_index: $intermediate_index + 1;
					}
					
				} @else {
					$complete_sizes: map.set($complete_sizes, $breakpoint, $size);
				}
			}
			
			// If this is the last entry, add it manually
			@else {
				$complete_sizes: map.set(
					$complete_sizes,
					$breakpoint,
					$size
				);
			}
		}
		
		$size_index: $size_index + 1;
	}
	
	@return $complete_sizes;
}


%cw-inline-warning {
	position: relative;
	overflow: auto;
	&::before {
		position: absolute;
		z-index: 9999;
		left: 12px;
		right: 12px;
		top: 12px;
		padding: 12px 16px;
		border-radius: 8px;
		background: #f00; // color(warning); // TODO: create CW-specific colors
		box-shadow: 0 8px 24px rgb(0 0 0 / 0.5);
		font-size: 20px;
		color: #fff; // color(white); // TODO: create CW-specific colors
		text-align: left;
		text-transform: none;
		letter-spacing: normal;
	}
}
