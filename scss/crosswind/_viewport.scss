.breakpoint-detector {
	position: fixed;
	left: 0;
	bottom: 0;
	z-index: 10000;
	display: block;
	width: 60px;
	height: 48px;
	padding: 8px 12px;
	background: color(gray);
	text-align: center;
	color: color(white);
	text-transform: uppercase;
	letter-spacing: 0.05em;
	
	span {
		display: none;
		@each $breakpoint in map.keys($breakpoints) {
			@include b('= #{$breakpoint}') {
				&.#{$breakpoint} {
					display: block;
				}
			}
		}
	}
}

.breakpoint-scale {
	$line_height: 20px;
	overflow: hidden;
	div {
		position: relative;
		margin: 2px 0;
		padding: 0 8px;
		height: $line_height;
		background: color(cement);
		font-size: 14px;
		text-transform: uppercase;
		letter-spacing: 0.05em;
		
		&::after {
			content: '';
			position: absolute;
			right: 0;
			top: 0;
			display: block;
			height: 0;
			border-top: ($line_height - 1px) solid color(white);
			border-left: 1px solid transparent;
		}
	}
	
	@each $key, $value in $breakpoints {
		$current_index: list.index(map.keys($breakpoints), $key);
		$next_index: $current_index + 1;
		@if $next_index > list.length(map.keys($breakpoints)) {
			$next_index: $current_index;
		}
		$next_size: list.nth(map.values($breakpoints), $next_index);
		$wedge_width: if($current_index != 1, $next_size - $value, $next_size - $content_min_width);
		
		.#{$key} {
			width: $next_size;
			@include b('= #{$key}') {
				background: color(mint);
			}
			&::after {
				border-left-width: $wedge_width;
			}
		}
	}
}
