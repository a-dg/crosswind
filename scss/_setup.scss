@forward 'color';
@forward 'variant';
@forward 'grid';
@forward 'typography';

@use 'sass:map';
@use 'sass:meta';

@use '../lib/breakbeat/scss' as breakbeat;
@use 'config' as cc;
@use 'reset';
@use 'color';
@use 'variant';
@use 'grid'; // Needs Breakbeat when mixin called
@use 'typography'; // Needs Breakbeat but only when mixin parabolic is called



// TODO: maybe this is where everything should be augmented, copied, and gathered into one place to be accessible throughout Crosswind
// Ohhhh fuck yeah that's what we're about to do


@mixin setup($settings) {
	cc.$settings: $settings;
	
	$_breakpoints: grid.create_breakpoints(
		$names: cc.get(breakpoint_names),
		$start: cc.get(breakpoint_width_min),
		$end: cc.get(breakpoint_width_max),
		$curve: cc.get(breakpoint_scale_curve),
		$additional: cc.get(breakpoint_additions),
		$round_to: cc.get(breakpoint_rounding)
	);
	
	// TODO: make all params optional
	@include breakbeat.configure((
		breakpoints: $_breakpoints,
		output_em_queries: cc.get(output_em_queries),
		output_query_comments: cc.get(output_query_comments),
		// global_font_size: cc.get(global_font_size),
		// height_breakpoints_key: cc.get(height_breakpoints_key),
	));
	
	
	@include grid.gutter_settings(); // Needs Breakbeat
	@include grid.set_max();
	@include grid.set_gutter_flexible();
	@include grid.set_gutter_by_type();
	
	// TODO: create a new function within (each?) module to process and modify
	// its settings as necessary
	
	@include cc.set(colors, color.convert_raw_color_keys(cc.get(colors)));
	@include cc.set(variants, variant.convert_variant_keys(cc.get(variants)));
	
	@include color.check_variant_keys();
	
	$transparent_colors: color.create_transparent_variant_colors();
	@include cc.set(colors, map.deep_merge(cc.get(colors), map.get($transparent_colors, colors)));
	@include cc.set(variants, map.deep_merge(cc.get(variants), map.get($transparent_colors, variants)));
	
	@include color.define_color_variables();
	@include color.define_variant_classes();
	@include color.define_inset_variants();
	
	@include reset.reset();
	@include typography.parabolic_font_sizes(cc.get(all_font_sizes));
	// @include parabolic_font_sizes($all_line_heights, 'line-height');
	// @debug closest_font_size($all_font_sizes, 32px);
}
