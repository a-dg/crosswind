@use 'sass:meta';

// @use 'lib/breakbeat' as *;
@use 'crosswind' as *;
@use 'config';

@use 'site/about';



* {
	box-sizing: border-box;
	font-family: 'Fatima N', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

body {
	margin: 0;
	padding: 0;
	font-size: 24px;
	font-variant-ligatures: none;
}


[class*=" v-"],
[class^="v-"],
[cw-v] {
	background: color(bg);
}


// TODO: define vertical spacing using same methods as font sizing, using start and end breakpoints and values for scaling pixel values, rather than basing vertical spacing on font size


h1 {
	margin: 4em 0 1em 0;
	padding: 0 gutter(outer);
	text-align: center;
}

h2 {
	margin: config.$label_margin;
	padding: config.$label_padding;
	border-bottom: config.$label_border_width solid config.$label_border_color;
	font-weight: 400;
	// font-size: 24px;
	text-align: center;
}
span.i-label {
	flex: 1 1 0;
	display: block;
	margin: 0;
	padding: config.$item_label_padding;
	// border: 2px solid color(pink);
	// border-width: 0 2px;
	background: color(pink);
	color: color(white);
	font-size: 32px;
	text-transform: uppercase;
	letter-spacing: 0.05em;
	text-align: center;
	
	@include b(lg) {
		color: color(cement);
	}
}

.g-3 {
	@include grid_setup((
		zo: 1,
		md: 3,
	));
}

.g-4 {
	@include grid_setup((
		zo: 1,
		sm: 2,
		av: 3,
		lg: 4,
	));
}

// TODO: any grid that has changes past the max width will either need to
// always be within a full-width container, or will have to have its responsive
// changes past the max width suppressed when it's in a max-width container
.g-6 {
	@include grid_setup((
		zo: 1,
		sm: 2,
		av: 3,
		ch: 4,
		lg: 5,
		yl: 6,
	));
}



.crazy {
	grid-auto-rows: minmax(120px, auto);
	@include layout((
		zo: (6, 3 r 2, 3 r 3, 3, 2, 2, 2),
		sm: (4, 2 r 2, 2 r 3, 2, 4, 2, 2),
		md: (3, 3 r 2, 3 r 3, 3, 3, 3 r 2, 6),
		av: (4 4 r 3, 5 r 1, 3 r 3, 5 r 2, 6 o -1, 3 4 r 1 o -2, 6 4),
	), $repeat: false);
	
	> :nth-child(1) .i-label { background: color(pink); }
	> :nth-child(2) .i-label { background: color(mint); }
	> :nth-child(3) .i-label { background: color(purple); }
	> :nth-child(4) .i-label { background: color(blue); }
	> :nth-child(5) .i-label { background: color(pink); }
	> :nth-child(6) .i-label { background: color(purple); }
	
	span.i-label {
		height: 100%;
	}
}


.silly {
	grid-auto-rows: minmax(120px, auto);
	@include layout((
		zo: (2, 2, 4, 4 r 2, 4),
		md: (4, 4, 2 r 3 2, 6 r 2 2, 4),
		av: (-1, 4, 3 r 2 2, 9 r 2 2, 4 o -1),
		ch: (6, 6, 3 r 3, 6 r 3, 3 r 3),
	));
	
	> :nth-child(1) .i-label { background: color(pink); }
	> :nth-child(2) .i-label { background: color(pink); }
	> :nth-child(3) .i-label { background: color(purple); }
	> :nth-child(4) .i-label { background: color(blue); }
	> :nth-child(5) .i-label { background: color(pink); }
	
	span.i-label {
		height: 100%;
	}
}


.col-4-left {
	@include layout((
		zo: 4,
	));
}

.col-6 {
	@include layout((
		zo: 6,
		md: 10 2,
		av: 8 3,
		ch: 6 4,
	));
	
	.hang-r {
		@include layout((
			ch: 9 4,
		), $self: true);
	}
	.hang-l {
		@include layout((
			ch: 9,
		), $self: true);
	}
	
	.nine-in-six {
		width: grid_element_width(9, 6);
		#{$content_width_prop}: 9;
	}
	.unhang.six-in-nine {
		// margin: 0 !important;
		width: grid_element_width(6, 9);
		#{$content_width_prop}: 6;
	}
	
	.unhang.six-in-nine.in-ext {
		// margin-right: 
		// width: grid_element_width(6, 9);
		width: auto;
		#{$content_width_prop}: 6;
	}
}


.col-8-4-custom {
	// TODO: make this configurable through a mixin
	grid-template-columns: grid_element_width(8, 12) auto;
	
	> :nth-child(2n) {
		.i-label {
			background: color(blue);
		}
	}
		
	.outlier {
		// full width
		@include layout((
			zo: 2,
		), $self: true);
	}
}

.col-6-2-4 {
	@include layout((
		zo: (6, 6),
		md: (7, 5),
		av: (6, 2, 4),
	));
	
	> :nth-child(1) {
		position: relative;
		z-index: 2;
		left: grid_element_offset(3, 6);
		
		// TODO: it would be nice if 6 could be --content-width, but right now the
		// element width is used in a SCSS calculation in operate_list(), which is
		// not compatible with CSS variables
		// left: grid_element_offset(3, var(--content-width));
		
		.i-label {
			background: color(mint);
			opacity: 0.7;
		}
	}
	> :nth-child(2) {
		.i-label {
			background: color(blue);
		}
		position: relative;
		// left: grid_element_width(1, 3, $is_negative: false, $include_external_gutter: true);
		
		// left: grid_element_offset(-3, 2);

	}
	> :nth-child(3) {
		position: relative;
		// left: grid_element_offset(-1, 4);
	}
}

.col-6-6 {
	@include layout((
		zo: 6,
	));
}

.col-8-4 {
	@include layout((
		zo: (6, 6),
		md: (7, 5),
		av: (8, 4),
		// ch: (9, 3),
		// lg: (10, 2),
	));
}

.col-9-3 {
	@include layout((
		zo: (6, 6),
		md: (7, 5),
		av: (8, 4),
		ch: (9, 3),
		// lg: (10, 2),
	));
}

.col-10-2 {
	@include layout((
		zo: (6, 6),
		md: (7, 5),
		av: (8, 4),
		ch: (9, 3),
		lg: (10, 2),
	));
}



.variant-test {
	margin: 20px;
	padding: 20px;
	border-radius: 20px;
	h3 {
		color: color(header);
		border-bottom: 10px solid color(line);
	}
	hr {
		margin: 20px 0;
		height: 0;
		border: none;
		border-bottom: 6px solid color(border);
	}
	p {
		color: color(text);
	}
	a.btn {
		display: inline-block;
		padding: 12px 16px;
		background: color(button_bg);
		color: color(button_text);
		text-decoration: none;
	}
}
