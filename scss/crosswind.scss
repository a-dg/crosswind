@use 'sass:math';
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

$gutter_type: flexible;

@import 'breakbeat';
@import 'functions';
@import 'mixins';
@import 'variables';


* {
	box-sizing: border-box;
  font-family: 'Fatima N', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

body {
	margin: 0;
	padding: 48px 0;
	font-size: 24px;
}

h2 {
	margin: $label_margin;
	padding: $label_padding;
	border-bottom: $label_border_width solid $label_border_color;
	// background: #eee;
	font-weight: 400;
	font-size: 24px;
	text-align: center;
}
span.g-label {
	display: block;
	margin: 0;
	padding: $item_label_padding;
	// border: 1px solid #09f;
	// border-width: 0 $label_border_width;
	background: #eee;
}

.c {
	margin: gutter(y) auto;
	> .c {
		margin: 0 auto;
	}
}

.c-full-width {
}

.c-max-width {
	max-width: $content_max_width;
}
.outer-padding {
	padding-left: gutter(outer);
	padding-right: gutter(outer);
}

.g {
	display: grid;
	gap: gutter(x);
	margin: gutter(x) 0;
}

.g-3 {
	@include grid_setup((
		zo: 1,
		md: 3,
	));
}

.g-4 {
	@include grid_setup((
		zo: 1,
		sm: 2,
		av: 3,
		lg: 4,
	));
}

// TODO: any grid that has changes past the max width will either need to
// always be within a full-width container, or will have to have its responsive
// changes past the max width suppressed when it's in a max-width container
.g-6 {
	grid-template: auto / repeat(1, 1fr);
	@include b(sm) {
		grid-template-columns: repeat(2, 1fr);
	}
	@include b(av) {
		grid-template-columns: repeat(3, 1fr);
	}
	@include b(ch) {
		grid-template-columns: repeat(4, 1fr);
	}
	@include b(lg) {
		grid-template-columns: repeat(5, 1fr);
	}
	@include b(yl) {
		grid-template-columns: repeat(6, 1fr);
	}
}

.g-auto {
	grid-template: auto / repeat(auto-fill, minmax(200px, auto));
}

// TODO: consider renaming to .i or no name at all, since all children of grids
// might be grid items (or might not, think about this)
.g-item {
	span.g-label {
		display: block;
		background: #999;
		color: #fff;
		font-weight: 300;
		text-transform: uppercase;
		letter-spacing: 0.05em;
		text-align: center;
	}
}


.g-wire {
	$border_color: #000;
	$border_width: 1px;
	$content_inset: 10px;
	display: grid;
	gap: 0;
	margin: 0 ($content_inset * -1) $border_width ($content_inset * -1);
	// overflow: hidden;
	// border-top: $border_width solid #f00;
	.g-item {
		margin: 0 ($border_width * -1) ($border_width * -1) 0;
		padding: $content_inset;
		border: $border_width solid $border_color;
		position: relative;
		
		&::before,
		&::after {
			position: absolute;
			width: 0;
			height: $border_width;
			background: $border_color;
		}
		&::before {
			top: ($border_width * -1);
		}
		&::after {
			bottom: ($border_width * -1);
		}
	}
	
	&.g-6 {
		.g-item {
			&:nth-child(6n),
			&:nth-child(6n+1) {
				&::before,
				&::after {
					content: '';
					// TODO: use CSS variable to set offset and possibly this whole width
					width: gutter_extended(
						$invert: false,
						$offset: ($content_inset + gutter_max(x))
					);
				}
			}
			&:nth-child(6n) {
				margin-right: 0;
				border-right: none;
				&::before,
				&::after {
					left: 100%;
				}
			}
			&:nth-child(6n+1) {
				border-left: none;
				&::before,
				&::after {
					right: 100%;
				}
			}
		}
	}
	
	.outer-padding & {
		.g-item {
			&:nth-child(6n),
			&:nth-child(6n+1) {
				&::before,
				&::after {
					// TODO: use CSS variable to set offset and possibly this whole width
					width: gutter_extended(
						$invert: false,
						$offset: $content_inset
					);
				}
			}
		}
	}
}

.g-flush {
	$flush_border_width: 2px;
	$flush_border_color: #ccc;
	
	display: grid;
	margin: 0 0 0 ($flush_border_width * -1);
	overflow: hidden;
	border-top: $flush_border_width solid $flush_border_color;
	
	.c-max-width & {
		// TODO: this shouldn't really be true, because we should be able to use a
		// flush grid within a container, and have its borders line up nicely
		// TODO: change this to style flush grid without borders on sides when in
		// a full-width container, but with borders when in a max-width container
		@include warning('.g-flush may not be used within .c-max-width, as its container must be allowed to use the full width of the viewport');
	}
	
	.g-item {
		margin: ($flush_border_width * -1) ($flush_border_width * -1) 0 0;
		border: $flush_border_width solid $flush_border_color;
		// border-width: 1px 1px 0 0;
		
		/*
		border-width: 0 1px 1px 0;
		
		// Left column
		&:nth-child(2n+1) {
			padding-left: 0;
		}
		
		// Right column
		&:nth-child(2n+2) {
			padding-right: 0;
			border-right: none;
		}
		
		// First row
		&:nth-child(-n+2) {
			padding-top: 0;
		}
		
		// Last row
		&:nth-last-child(-n+2):nth-child(2n+1) {
			&, & ~ div {
				padding-bottom: 0;
				border-bottom: none;
			}
		}
		*/
	}
	span.g-label {
		background: none;
		color: #000;
	}
}



.g-layout {
	grid-template: auto / repeat(calc($grid_columns / 2), 1fr);
	@include b(md) {
		grid-template-columns: repeat($grid_columns, 1fr);
	}
}

.g-guide {
	border-bottom: 4px solid #000;
	@include b('< md') {
		&:nth-child(6) ~ & {
			display: none;
		}
	}
}

.col-6 {
	@include layout((
		zo: 6,
		md: 10 2,
		av: 8 3,
		ch: 6 4,
	));
}

.col-8-4 {
	@include layout((
		zo: (6, 6),
		md: (7, 5),
		av: (8, 4),
		// ch: (9, 3),
		// lg: (10, 2),
	));
	
	> :nth-child(2) {
		// right: grid_element_width(3, 1, $gutter_base_x, $include_external_gutter: true);
	}
}

@each $direction in (left, right) {
	.hang-#{string.slice($direction, 1, 1)} {
		margin-#{$direction}: gutter(outer, $invert: true);
		&.hang-extended {
			@include b($content_max_width) {
				margin-#{$direction}: gutter_extended(false);
			}
		}
		&.hang-full {
			@include b($content_max_width) {
				margin-#{$direction}: gutter_extended();
			}
		}
	}
}

.bg {
	padding-top: 30px;
	padding-bottom: 30px;
	background: #eee;
}

.content-at-edges {
	display: flex;
	justify-content: space-between;
	gap: gutter(x);
	padding-top: gutter(y);
	padding-bottom: gutter(y);
	background: #eee;
	
	// TODO: container is not .g, so this should not be .g-item
	.g-item {
		flex: 0 1 160px;
	}
}


.g-float {
	@include grid_float(
		$direction: right,
		$content_column_count: 6,
		$float_column_count: 5
	);
	
	+ p {
		margin-top: 0;
		text-align: justify;
		hyphens: auto;
	}
}
