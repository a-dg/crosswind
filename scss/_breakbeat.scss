// Breakbeat v2.0.1

@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

$output_em_queries: false !default;
$output_query_comments: false !default;
$global_font_size: 16px !default;
$height_breakpoints_key: 'height' !default;

// Defaults
$breakpoints: (
  small: 0,
  medium: 640px,
  large: 1024px,
  xlarge: 1200px,
  xxlarge: 1440px,
) !default;

$breakpoint_names: map.keys($breakpoints) !default;

$b_width_property_markers: ('width', 'w', 'x');
$b_height_property_markers: ('height', 'h', 'y');


// /**
//  * Get size from breakpoint description
//  * @param {string/number} $breakpoint
//  * @param {number} $scale
//  * @return {number}
//  */
@function b_size_from_breakpoint($breakpoint, $scale: 0) {
  @return breakbeat($breakpoint, $scale, $return_size: true);
}


// /**
//  * Get height breakpoints map
//  * @param {map} $breakpoints_map
//  * @return {map}
//  */
@function b_get_height_breakpoints_map($breakpoints_map) {
  @if not map.has_key($breakpoints_map, $height_breakpoints_key)
    or list.length(map.get($breakpoints_map, $height_breakpoints_key)) == 0 {
    @return $breakpoints_map;
  }
  
  @return map.get($breakpoints, $height_breakpoints_key);
}


// /**
//  * Get breakpoint adjacent to input breakpoint
//  * @param {string} $breakpoint_name
//  * @param {int} $direction
//  * @param {bool} $is_height
//  * @return {map}
//  */
@function b_adjacent_breakpoint($breakpoint_name, $direction, $is_height: false) {
  $breakpoints_map: $breakpoints;
  @if $is_height {
    $breakpoints_map: b_get_height_breakpoints_map($breakpoints_map);
  } @else {
    $breakpoints_map: map.remove($breakpoints_map, $height_breakpoints_key);
  }
  
  $current_index: list.index(map.keys($breakpoints_map), $breakpoint_name);
  @if $current_index == null {
    @error b_unknown_breakpoint_error($breakpoint_name);
  }
  
  $adjacent_index: ($current_index + $direction);
  $adjacent_name: null;
  $adjacent_size: null;
  @if $adjacent_index < 1 or $adjacent_index > length($breakpoints_map) {
    $adjacent_name: $breakpoint_name;
    $adjacent_size: map.get($breakpoints_map, $breakpoint_name);
  } @else {
    $adjacent_name: nth(map.keys($breakpoints_map), $adjacent_index);
    $adjacent_size: nth(map.values($breakpoints_map), $adjacent_index);
  }
  @return ($adjacent_name: $adjacent_size);
}


// /**
//  * Get size of breakpoint adjacent to input breakpoint
//  * @param {string} $breakpoint_name
//  * @param {int} $direction
//  * @param {bool} $is_height
//  * @return {number}
//  */
@function b_adjacent_breakpoint_size($breakpoint_name, $direction, $is_height: false) {
  $adjacent_breakpoint: b_adjacent_breakpoint($breakpoint_name, $direction, $is_height);
  @return nth(map.values($adjacent_breakpoint), 1);
}


// /**
//  * Get name of breakpoint adjacent to input breakpoint
//  * @param {string} $breakpoint_name
//  * @param {int} $direction
//  * @param {bool} $is_height
//  * @return {string}
//  */
@function b_adjacent_breakpoint_name($breakpoint_name, $direction, $is_height: false) {
  $adjacent_breakpoint: b_adjacent_breakpoint($breakpoint_name, $direction, $is_height);
  @return nth(map.keys($adjacent_breakpoint), 1);
}


// /**
//  * Get size of next smallest breakpoint adjacent to input breakpoint
//  * @param {string} $breakpoint_name
//  * @param {bool} $is_height
//  * @return {string}
//  */
@function b_prev_breakpoint_size($breakpoint_name, $is_height) {
  @return b_adjacent_breakpoint_size($breakpoint_name, -1, $is_height);
}


// /**
//  * Get name of next smallest breakpoint adjacent to input breakpoint
//  * @param {string} $breakpoint_name
//  * @param {bool} $is_height
//  * @return {string}
//  */
@function b_prev_breakpoint_name($breakpoint_name, $is_height) {
  @return b_adjacent_breakpoint_name($breakpoint_name, -1, $is_height);
}


// /**
//  * Get size of next largest breakpoint adjacent to input breakpoint
//  * @param {string} $breakpoint_name
//  * @param {bool} $is_height
//  * @return {string}
//  */
@function b_next_breakpoint_size($breakpoint_name, $is_height) {
  @return b_adjacent_breakpoint_size($breakpoint_name, 1, $is_height);
}


// /**
//  * Get name of next largest breakpoint adjacent to input breakpoint
//  * @param {string} $breakpoint_name
//  * @param {bool} $is_height
//  * @return {string}
//  */
@function b_next_breakpoint_name($breakpoint_name, $is_height) {
  @return b_adjacent_breakpoint_name($breakpoint_name, 1, $is_height);
}


// /**
//  * Infer axis property from breakpoint description
//  * @param {string} $breakpoint
//  * @return {string}
//  */
@function b_get_axis_property($breakpoint) {
  @if meta.type_of($breakpoint) == string
    and list.index($b_height_property_markers, b_get_first_word($breakpoint)) {
    @return 'height';
  }
  
  @return 'width';
}


// /**
//  * Get first word in string
//  * @param {string} $string
//  * @return {string}
//  */
@function b_get_first_word($string) {
  $first_word_end_index: string.index($string, ' ');
  @if $first_word_end_index == null {
    @return null;
  }
  
  @return string.slice($string, 1, $first_word_end_index - 1);
}


// /**
//  * Strip axis property from breakpoint
//  * @param {string} $breakpoint
//  * @return {string}
//  */
@function b_remove_axis_property($breakpoint) {
  @if meta.type_of($breakpoint) == string
    and list.index(list.join($b_width_property_markers, $b_height_property_markers), b_get_first_word($breakpoint)) {
    $breakpoint: string.slice($breakpoint, string.index($breakpoint, ' ') + 1);
  }
  @return $breakpoint;
}


// /**
//  * Convert percentage to pixels
//  * @param {number} $value
//  * @return {number}
//  */
@function b_percent_to_px($value) {
  @if unitless($value) {
    $value: ($value * 1px);
  }
  @if unit($value) != '%' {
    @return $value;
  }
  
  @return (b_strip_units(calc($value / 100)) * $global_font_size);
}


// /**
//  * Convert pixels to ems
//  * @param {number} $value
//  * @return {number}
//  */
@function b_px_to_em($value) {
  @if b_is_zero($value) {
    @return 0;
  }
  
  @if unitless($value) {
    $value: ($value * 1px);
  }
  @if unit($value) != 'px' {
    @return $value;
  }
  
  $global_font_size_px: b_percent_to_px($global_font_size);
  $em: (round(calc((($value / $global_font_size_px) * 10000) / 10000)));
  @return ($em * 1em);
}


// /**
//  * Convert ems to pixels
//  * @param {number} $value
//  * @return {number}
//  */
@function b_em_to_px($value) {
  @if b_is_zero($value) {
    @return 0;
  }
  
  @if unitless($value) {
    $value: ($value * 1em);
  }
  @if unit($value) != 'em' {
    @return $value;
  }
  
  $global_font_size_px: b_percent_to_px($global_font_size);
  $px: (calc($value / 1em) * $global_font_size_px);
  @return $px;
}


// /**
//  * Is this value zero?
//  * @param {mixed} $value
//  * @return {bool}
//  */
@function b_is_zero($value) {
  @return
    meta.type_of($value) == number
    and b_strip_units($value) == 0;
}


// /**
//  * Strip units from number
//  * @param {number} $number
//  * @return {unitless number}
//  */
@function b_strip_units($number) {
  @if meta.type_of($number) == number and not unitless($number) {
    $num_length: string.length(#{$number});
    $unit_length: string.length(unit($number));
    $unitless: string.slice(#{$number}, 1, ($num_length - $unit_length));
    @return b_convert_to_number($unitless);
  }
  // @warn '"#{$number}" is not a number, or it does not have any units to strip away.';
  @return $number;
}


// /**
//  * Is this a number as a string?
//  * @param {mixed} $value
//  * @return {bool}
//  */
@function b_is_number_as_string($value) {
  $first_character: string.slice($value, 1, 1);
  $second_character: string.slice($value, 2, 2);
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @if list.index(map.keys($numbers), $first_character) != null {
    @return true;
  }
  
  @if $first_character == '-' and list.index(map.keys($numbers), $second_character) != null {
    @return true;
  }
  
  @return false;
}


// /**
//  * Convert string to number
//  * @link https://hugogiraudel.com/2014/01/15/sass_string_to_number/
//  * @author Hugo Giraudel
//  * @param {String | Number} $value - Value to be parsed
//  * @return {Number}
//  */
@function b_convert_to_number($value) {
  @if meta.type_of($value) == number {
    @return $value;
  } @else if meta.type_of($value) != string {
    @error 'Value for b_convert_to_number() should be a number or a string';
  }
  
  $result: 0;
  $digits: 0;
  $is_negative: string.slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($is_negative, 2, 1) through string.length($value) {
    $character: string.slice($value, $i, $i);
    
    @if not (list.index(map.keys($numbers), $character) or $character == '.') {
      @return b_append_unit_to_value(if($is_negative, ($result * -1), $result), string.slice($value, $i));
    }
    
    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: (($result * 10) + map.get($numbers, $character));
    } @else {
      $digits: ($digits * 10);
      $result: ($result + calc(map.get($numbers, $character) / $digits));
    }
  }
  
  @return if($is_negative, ($result * -1), $result);
}


// /**
//  * Append unit to numeric value
//  * @link https://hugogiraudel.com/2014/01/15/sass_string_to_number/
//  * @author Hugo Giraudel
//  * @param {Number} $value - Value to add unit to
//  * @param {String} $unit - String representation of the unit
//  * @return {Number} - `$value` expressed in `$unit`
//  */
@function b_append_unit_to_value($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);
  @if not list.index(map.keys($units), $unit) {
    @error 'Invalid unit: #{$unit}';
  }
  
  @return ($value * map.get($units, $unit));
}


// /**
//  * Throw error for undefined breakpoint
//  * @param {string} $breakpoint_name
//  * @return {string}
//  */
@function b_unknown_breakpoint_error($breakpoint_name) {
  @return 'Unknown breakpoint name: #{$breakpoint_name}';
}


// /**
//  * Throw error for too many breakpoints specified for operator
//  * @param {string} $breakpoint_name
//  * @return {string}
//  */
@function b_too_many_arguments_error($breakpoint_name) {
  @return 'Too many breakpoint names in media query: #{$breakpoint_name}';
}


// /**
//  * Generate media query
//  * @param {string/number} $breakpoint
//  * @param {number} $scale
//  * @return {string}
//  */
@function b($breakpoint, $scale: 0) {
  @return breakbeat($breakpoint, $scale);
}


// /**
//  * Generate media query
//  * @param {string/number} $breakpoint
//  * @param {number} $scale
//  * @param {bool} $allow_null
//  * @param {bool} $return_size
//  * @return {string}
//  */
@function breakbeat($breakpoint, $scale: 0, $allow_null: false, $return_size: false) {
  $is_height: false;
  $breakpoints_map: $breakpoints;
  
  // Set axis property and remove opposite axis from breakpoints map
  $axis_property: b_get_axis_property($breakpoint);
  @if $axis_property == 'height' {
    $is_height: true;
    $breakpoints_map: b_get_height_breakpoints_map($breakpoints_map);
  } @else {
    $breakpoints_map: map.remove($breakpoints_map, $height_breakpoints_key);
  }
  $breakpoint: b_remove_axis_property($breakpoint);
  
  // Parse operator and breakpoint name
  $operator: '>=';
  $breakpoint_name: $breakpoint;
  @if meta.type_of($breakpoint) == string and not b_is_number_as_string($breakpoint) {
    @if string.index($breakpoint, ' ') != null {
      $operator: string.slice($breakpoint, 1, string.index($breakpoint, ' ') - 1);
      $breakpoint_name: string.slice($breakpoint, string.index($breakpoint, ' ') + 1);
    }
    
    @if string.index($breakpoint_name, ' ') and list.index(('><', '<>'), $operator) == null {
      @error b_too_many_arguments_error($breakpoint_name);
    }
  }
  
  // Get numerical value of breakpoint
  $breakpoint_size: null;
  @if meta.type_of($breakpoint_name) == string {
    @if not b_is_number_as_string($breakpoint_name) {
      $breakpoint_size: map.get($breakpoints_map, $breakpoint_name);
    } @else {
      $breakpoint_size: b_convert_to_number($breakpoint_name);
    }
  } @else {
    $breakpoint_size: $breakpoint_name;
  }
  @if $breakpoint_size == null and string.index($breakpoint_name, ' ') == null {
    @error b_unknown_breakpoint_error($breakpoint_name);
  }
  
  // Build media query
  $media_query: null;
  
  // This breakpoint and larger: >=
  @if $operator == '>=' {
    @if $scale != 0 {
      $next_size: b_next_breakpoint_size($breakpoint_name, $is_height);
      $breakpoint_size: round($breakpoint_size + (($next_size - $breakpoint_size) * $scale));
    }
    @if $output_em_queries {
      $breakpoint_size: b_px_to_em($breakpoint_size);
    }
    @if $breakpoint_size != 0 {
      $media_query: 'min-#{$axis_property}: #{$breakpoint_size}';
    }
  }
  
  // Larger than this breakpoint: >
  @else if $operator == '>' {
    $next_size: b_next_breakpoint_size($breakpoint_name, $is_height);
    
    @if $scale != 0 {
      $next_name: b_next_breakpoint_name($breakpoint_name, $is_height);
      $next_next_name: b_next_breakpoint_name($next_name, $is_height);
      $next_next_size: b_next_breakpoint_size($next_name, $is_height);
      $next_size: round($next_size + (($next_next_size - $next_size) * $scale));
    }
    
    @if $output_em_queries {
      $next_size: b_px_to_em($next_size);
    }
    
    $media_query: 'min-#{$axis_property}: #{$next_size}';
  }
  
  // This breakpoint and smaller: <=
  @else if $operator == '<=' {
    $next_size: b_next_breakpoint_size($breakpoint_name, $is_height);
    
    @if $scale != 0 {
      $next_size: round($breakpoint_size + (($next_size - $breakpoint_size) * $scale));
    }
    
    @if $next_size != $breakpoint_size {
      $next_size: ($next_size - 1px);
      
      @if $output_em_queries {
        $next_size: b_px_to_em($next_size);
      }
      
      $media_query: 'max-#{$axis_property}: #{$next_size}';
    }
  }
  
  // Smaller than this breakpoint: <
  @else if $operator == '<' {
    @if $scale != 0 {
      $prev_size: b_prev_breakpoint_size($breakpoint_name, $is_height);
      $breakpoint_size: round($breakpoint_size - (($breakpoint_size - $prev_size) * $scale));
    }
    @if $breakpoint_size <= 0 {
      $breakpoint_size: b_next_breakpoint_size($breakpoint_name, $is_height);
    }
    $breakpoint_size: ($breakpoint_size - 1px);
    
    @if $output_em_queries {
      $breakpoint_size: b_px_to_em($breakpoint_size);
    }
    
    $media_query: 'max-#{$axis_property}: #{$breakpoint_size}';
  }
  
  // Between two breakpoints, inclusive: ><
  @else if $operator == '><' {
    @if string.index($breakpoint_name, ' ') == null {
      @error 'Between >< operator requires two breakpoint names';
    }
    
    $first_name: string.slice($breakpoint_name, 1, string.index($breakpoint_name, ' ') - 1);
    $second_name: string.slice($breakpoint_name, string.index($breakpoint_name, ' ') + 1);
    $breakpoint_size: map.get($breakpoints_map, $first_name);
    $next_name: b_next_breakpoint_name($second_name, $is_height);
    $next_size: (b_next_breakpoint_size($second_name, $is_height) - 1px);
    
    @if $output_em_queries {
      $breakpoint_size: b_px_to_em($breakpoint_size);
      $next_size: b_px_to_em($next_size);
    }
    
    @if $breakpoint_size == 0 and $second_name != $next_name {
      $media_query: 'max-#{$axis_property}: #{$next_size}';
    } @else if $next_name != $first_name
      and $breakpoint_size < $next_size
      and $second_name != $next_name {
      $media_query: 'min-#{$axis_property}: #{$breakpoint_size}) and (max-#{$axis_property}: #{$next_size}';
    } @else if $breakpoint_size != 0 {
      $media_query: 'min-#{$axis_property}: #{$breakpoint_size}';
    }
  }
  
  // Outside of a breakpoint or a range of breakpoints: <>
  @else if $operator == '<>' {
    $first_name: $breakpoint_name;
    $second_name: $breakpoint_name;
    @if string.index($breakpoint_name, ' ') != null {
      $first_name: string.slice($breakpoint_name, 1, string.index($breakpoint_name, ' ') - 1);
      $second_name: string.slice($breakpoint_name, string.index($breakpoint_name, ' ') + 1);
    }
    
    $lower_range_size: (map.get($breakpoints_map, $first_name) - 1px);
    $upper_range_name: b_next_breakpoint_name($second_name, $is_height);
    $upper_range_size: b_next_breakpoint_size($second_name, $is_height);
    
    @if $output_em_queries {
      $lower_range_size: b_px_to_em($lower_range_size);
      $upper_range_size: b_px_to_em($upper_range_size);
    }
    
    @if $lower_range_size <= 0 and $second_name != $upper_range_name {
      $media_query: 'min-#{$axis_property}: #{$upper_range_size}';
    } @else if $upper_range_name != $first_name
      and $lower_range_size < $upper_range_size
      and $second_name != $upper_range_name {
      $media_query: 'max-#{$axis_property}: #{$lower_range_size}), (min-#{$axis_property}: #{$upper_range_size}';
    } @else if $lower_range_size != 0 {
      $media_query: 'max-#{$axis_property}: #{$lower_range_size}';
    }
  }
  
  // Within this breakpoint only: =
  @else if list.index(('=', '==', '==='), $operator) {
    $next_name: b_next_breakpoint_name($breakpoint_name, $is_height);
    $next_size: b_next_breakpoint_size($breakpoint_name, $is_height);
    @if $scale < 0 {
      $next_size: round($breakpoint_size + (($next_size - $breakpoint_size) * abs($scale)));
    } @else if $scale > 0 {
      $breakpoint_size: round($breakpoint_size + (($next_size - $breakpoint_size) * $scale));
    }
    $next_size: ($next_size - 1px);
    
    @if $output_em_queries {
      $breakpoint_size: b_px_to_em($breakpoint_size);
      $next_size: b_px_to_em($next_size);
    }
    
    @if $breakpoint_size == 0 {
      $media_query: 'max-#{$axis_property}: #{$next_size}';
    } @else if $next_name != $breakpoint_name
      and $breakpoint_size < $next_size {
      $media_query: 'min-#{$axis_property}: #{$breakpoint_size}) and (max-#{$axis_property}: #{$next_size}';
    } @else {
      $media_query: 'min-#{$axis_property}: #{$breakpoint_size}';
    }
  }
  
  @if $return_size {
    @return $breakpoint_size;
  }
  
  @if $media_query == null {
    @if $allow_null {
      @return null;
    }
    
    @return string.unquote('(min-#{$axis_property}: 0)');
  }
  
  @return string.unquote('(#{$media_query})');
}


// /**
//  * Output CSS rules wrapped in media query
//  * @param {string/number} $breakpoint
//  * @param {number} $scale
//  */
@mixin b($breakpoint, $scale: 0) {
  @include breakbeat($breakpoint, $scale) {
    @content;
  }
}


// /**
//  * Output CSS rules wrapped in media query
//  * @param {string/number} $breakpoint
//  * @param {number} $scale
//  */
@mixin breakbeat($breakpoint, $scale: 0) {
  $media_query: breakbeat($breakpoint, $scale, $allow_null: true);
  $axis_property: b_get_axis_property($breakpoint);
  $breakpoint: b_remove_axis_property($breakpoint);
  
  @if $media_query != null {
    @media #{$media_query} {
      @if $output_query_comments {
        $report: $breakpoint;
        @if $scale != 0 {
          $report: '#{$report}, scale #{$scale}';
        }
        /* #{$axis_property} #{$report} */
      }
      @content;
    }
  } @else {
    @content;
  }
}
